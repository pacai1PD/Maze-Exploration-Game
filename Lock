
#include <iostream>
#include <vector>
#include <string>
#include <cstdint>
#include <cstring>
#include <functional>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <array>
#include <chrono>
#include <set>  
using namespace std;
// 线索类型枚举：定义密码约束条件的类型
enum ClueType {
    PRIME_UNIQUE,       // 密码每位是素数且不重复
    EVEN_POS,           // 指定位是偶数
    ODD_POS,            // 指定位是奇数
    FIXED_FIRST,        // 第一位固定为某个值
    FIXED_SECOND,       // 第二位固定为某个值
    FIXED_THIRD         // 第三位固定为某个值
};

// 线索结构体：存储单条线索的类型和参数
struct Clue {
    ClueType type;       // 线索类型
    int param1, param2;  // 存储位置或固定值
};

vector<Clue> parseClues() {
    vector<Clue> clues;
    string input;

    cout << "请输入线索：";
    getline(cin, input);  // 使用getline读取整行输入

    // 检查输入格式是否正确
    if (input.empty() || input[0] != '[' || input[input.size() - 1] != ']') {
        cout << "输入格式错误！请使用正确的格式。" << endl;
        return clues;
    }

    // 提取内部的线索数组部分
    string inner = input.substr(1, input.size() - 2);

    // 解析线索
    size_t pos = 0;
    while (pos < inner.size()) {
        // 查找下一条线索的开始位置
        size_t start = inner.find('[', pos);//后面的为查找的起始位置
        if (start == string::npos) break;//npos表示字符串操作中的 "未找到" 或 "无效位置"

        // 查找线索的结束位置
        size_t end = inner.find(']', start);
        if (end == string::npos) break;

        // 提取线索字符串
        string clueStr = inner.substr(start + 1, end - start - 1);

        // 计算逗号数量
        size_t commaCount = 0;
        size_t commaPos = clueStr.find(',');
        while (commaPos != string::npos) {
            commaCount++;
            commaPos = clueStr.find(',', commaPos + 1);
        }

        // 解析线索参数
        int a = -1, b = -1, c = -1;
        size_t firstComma = clueStr.find(',');
        size_t secondComma = clueStr.find(',', firstComma + 1);

        try {
            // 根据逗号数量解析参数
            if (commaCount == 0) {
                // 无双元或三元参数，尝试解析为单个数字
                if (!clueStr.empty()) {
                    a = stoi(clueStr);
                }
            }
            else if (commaCount == 1) {
                // 双元参数
                a = stoi(clueStr.substr(0, firstComma));
                b = stoi(clueStr.substr(firstComma + 1));
            }
            else if (commaCount == 2) {
                // 三元参数
                a = stoi(clueStr.substr(0, firstComma));
                b = stoi(clueStr.substr(firstComma + 1, secondComma - firstComma - 1));
                c = stoi(clueStr.substr(secondComma + 1));
            }
            else {
                cout << "线索格式错误：逗号数量超过2个！" << endl;
                pos = end + 1;
                continue;
            }
        }
        catch (const exception& e) {
            cout << "线索解析错误: " << e.what() << endl;
            pos = end + 1;
            continue;
        }
        //catch处理错误

        // 创建线索对象
        Clue clue;
        bool validClue = true;
        if (commaCount == 0) {
            // 单参数线索
            if (a != -1) {
                clue.type = FIXED_FIRST;
                clue.param1 = a;
            }
            else {
                // 无效线索：单参数但为-1
                validClue = false;
            }
        }
        else if (commaCount == 1) {
            // 双参数线索
            if (a != -1 && b == 0) {
                // 指定位是偶数
                clue.type = EVEN_POS;
                clue.param1 = a;
            }
            else if (a != -1 && b == 1) {
                // 指定位是奇数
                clue.type = ODD_POS;
                clue.param1 = a;
            }
            else if (a == -1 && b == -1 ) {
                // 全局约束：每位是素数且不重复
                clue.type = PRIME_UNIQUE;
            }
            else {
                // 无效线索：双参数但不符合任何有效类型
                validClue = false;
            }
        }
        else if (commaCount == 2) {
            // 三参数线索
            if (a == -1 && b == -1 && c != -1) {
                // 第三位固定
                clue.type = FIXED_THIRD;
                clue.param1 = c;
            }
            else if (a == -1 && b != -1 && c == -1) {
                // 第二位固定
                clue.type = FIXED_SECOND;
                clue.param1 = b;
            }
            else if (a != -1 && b == -1 && c == -1) {
                // 第一位固定
                clue.type = FIXED_FIRST;
                clue.param1 = a;
            }
            else {
                // 无效线索：三参数但不符合任何有效类型
                validClue = false;
            }
        }
        else {
            // 无效线索：逗号数量不符合预期
            validClue = false;
        }

        // 验证参数有效性
        if (validClue) {
            // 检查参数是否在有效范围内
            if ((clue.type == EVEN_POS || clue.type == ODD_POS) &&
                (clue.param1 < 1 || clue.param1 > 3)) {
                cout << "线索错误：位置参数必须在1-3之间！" << endl;
                validClue = false;
            }
            else if ((clue.type == FIXED_FIRST || clue.type == FIXED_SECOND || clue.type == FIXED_THIRD) &&
                (clue.param1 < 0 || clue.param1 > 9)) {
                cout << "线索错误：固定值参数必须在0-9之间！" << endl;
                validClue = false;
            }
            else if (commaCount == 1)
            {
                if (b != -1 && b != 0 && b != 1)
                {
                    cout << "线索格式错误！" << endl;
                    validClue = false;
                }
            }
        }

        // 添加有效线索
        if (validClue) {
            clues.push_back(clue);
        }
        else {
            cout << "无效线索格式: [" << a << "," << b << "," << c << "]" << endl;
            if(pos>=inner.size() - 1)
            return {};
        }

        pos = end + 1;//处理完或出现错误，跳到end+1
    }

    return clues;
}

bool checkPassword(const std::vector<int>& password, const std::vector<Clue>& clues) {
    // 1. 检查密码长度（必须是3位）
    if (password.size() != 3) {
        return false;
    }

    // 2. 检查是否有重复数字
    std::set<int> uniqueDigits(password.begin(), password.end());
    if (uniqueDigits.size() != 3) {
        return false;
    }

    // 3. 检查每个线索约束
    for (const auto& c : clues) {
        switch (c.type) {
        case FIXED_FIRST:
            if (password[0] != c.param1) return false;
            break;
        case FIXED_SECOND:
            if (password[1] != c.param1) return false;
            break;
        case FIXED_THIRD:
            if (password[2] != c.param1) return false;
            break;
        case PRIME_UNIQUE: {
            std::vector<int> primes = { 2, 3, 5, 7 };
            for (int digit : password) {
                if (std::find(primes.begin(), primes.end(), digit) == primes.end()) {
                    return false;  // 有非素数
                }
            }
            break;
        }
        case EVEN_POS:
            if (c.param1 >= 1 && c.param1 <= 3 && password[c.param1 - 1] % 2 != 0) {
                return false;  // 指定位置不是偶数
            }
            break;
        case ODD_POS:
            if (c.param1 >= 1 && c.param1 <= 3 && password[c.param1 - 1] % 2 != 1) {
                return false;  // 指定位置不是奇数
            }
            break;
        default:
            break;
        }
    }

    return true;  // 符合所有约束
}

// 生成当前密码前缀的候选数字：根据已选数字（prevDigits）和线索，生成下一位可能的数字，已经确定的密码称为密码前缀
std::vector<int> generateCandidates(const std::vector<int>& prevDigits, const std::vector<Clue>& clues) {
    // 1. 处理固定位线索（优先级最高）
    int pos = prevDigits.size() + 1;  // 当前要选的位置（1-3）
    for (const auto& c : clues) {
        if ((pos == 1 && c.type == FIXED_FIRST) ||
            (pos == 2 && c.type == FIXED_SECOND) ||
            (pos == 3 && c.type == FIXED_THIRD)) {
            return { c.param1 };  // 直接返回固定值
        }
    }

    // 2. 初始化所有可能的数字（0-9）
    std::vector<int> candidates;
    for (int i = 0; i <= 9; ++i) {
        candidates.push_back(i);
    }

    // 3. 排除已选数字（确保密码中没有重复数字）
    std::vector<int> filteredCandidates;
    for (int num : candidates) {
        if (std::find(prevDigits.begin(), prevDigits.end(), num) == prevDigits.end()) {
            filteredCandidates.push_back(num);
        }
    }
    candidates = filteredCandidates;

    // 4. 应用素数约束（如果有）
    bool hasPrimeConstraint = false;
    for (const auto& c : clues) {
        if (c.type == PRIME_UNIQUE) {
            hasPrimeConstraint = true;
            std::vector<int> primes = { 2, 3, 5, 7 };  // 素数集合
            std::vector<int> primeCandidates;

            for (int num : candidates) {
                if (std::find(primes.begin(), primes.end(), num) != primes.end()) {
                    primeCandidates.push_back(num);
                }
            }

            candidates = primeCandidates;
            break;  // 素数约束只需处理一次
        }
    }

    // 5. 应用奇偶性约束（如果有）
    for (const auto& c : clues) {
        if ((c.type == EVEN_POS && c.param1 == pos) ||  // 当前位置要求偶数
            (c.type == ODD_POS && c.param1 == pos)) {    // 当前位置要求奇数

            std::vector<int> parityCandidates;
            for (int num : candidates) {
                if ((c.type == EVEN_POS && num % 2 == 0) ||  // 偶数约束
                    (c.type == ODD_POS && num % 2 == 1)) {    // 奇数约束
                    parityCandidates.push_back(num);
                }
            }

            candidates = parityCandidates;
            break;  // 每个位置的奇偶约束只需处理一次
        }
    }

    return candidates;  // 返回符合所有约束的候选数字
}

// SHA-256算法的C++实现，不依赖外部库
class SHA256 {
private:
    // SHA-256算法的常量
    const static uint32_t K[64];

    // 初始哈希值（来自SHA-256标准）
    std::array<uint32_t, 8> H = {
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };

    // 工具函数：右旋转
    inline uint32_t rightRotate(uint32_t value, unsigned int count) {
        return (value >> count) | (value << (32 - count));
    }

    // 处理单个512位的数据块
    void processBlock(const uint8_t* block) {
        // 创建消息调度表
        uint32_t W[64];
        for (int t = 0; t < 16; t++) {
            W[t] = (block[t * 4] << 24) | (block[t * 4 + 1] << 16) |
                (block[t * 4 + 2] << 8) | (block[t * 4 + 3]);
        }

        // 扩展消息调度表
        for (int t = 16; t < 64; t++) {
            uint32_t s0 = rightRotate(W[t - 15], 7) ^ rightRotate(W[t - 15], 18) ^ (W[t - 15] >> 3);
            uint32_t s1 = rightRotate(W[t - 2], 17) ^ rightRotate(W[t - 2], 19) ^ (W[t - 2] >> 10);
            W[t] = W[t - 16] + s0 + W[t - 7] + s1;
        }

        // 初始化工作变量
        uint32_t a = H[0];
        uint32_t b = H[1];
        uint32_t c = H[2];
        uint32_t d = H[3];
        uint32_t e = H[4];
        uint32_t f = H[5];
        uint32_t g = H[6];
        uint32_t h = H[7];

        // 主循环
        for (int t = 0; t < 64; t++) {
            uint32_t S1 = rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25);
            uint32_t ch = (e & f) ^ ((~e) & g);
            uint32_t temp1 = h + S1 + ch + K[t] + W[t];
            uint32_t S0 = rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22);
            uint32_t maj = (a & b) ^ (a & c) ^ (b & c);
            uint32_t temp2 = S0 + maj;

            h = g;
            g = f;
            f = e;
            e = d + temp1;
            d = c;
            c = b;
            b = a;
            a = temp1 + temp2;
        }

        // 更新哈希值
        H[0] += a;
        H[1] += b;
        H[2] += c;
        H[3] += d;
        H[4] += e;
        H[5] += f;
        H[6] += g;
        H[7] += h;
    }

public:
    // 计算输入数据的SHA-256哈希值
    std::vector<uint8_t> compute(const std::vector<uint8_t>& message) {
        // 计算填充后的长度（原始长度 + 1字节的1 + 填充0 + 8字节的长度）
        uint64_t originalBitLength = message.size() * 8;
        uint64_t paddedLength = message.size() + 1 + 8; // 至少需要添加9个字节
        paddedLength = (paddedLength + 63) & ~63;       // 调整为64字节的倍数（512位）

        // 创建填充后的消息
        std::vector<uint8_t> paddedMessage(paddedLength, 0);
        std::copy(message.begin(), message.end(), paddedMessage.begin());

        // 添加一个1位（作为一个字节的0x80）
        paddedMessage[message.size()] = 0x80;

        // 添加消息长度（以位为单位，大端序）
        for (int i = 0; i < 8; i++) {
            paddedMessage[paddedLength - 8 + i] = (originalBitLength >> ((7 - i) * 8)) & 0xFF;
        }

        // 按块处理消息
        for (size_t i = 0; i < paddedLength; i += 64) {
            processBlock(&paddedMessage[i]);
        }

        // 生成最终哈希值（32字节）
        std::vector<uint8_t> hash(32);
        for (int i = 0; i < 8; i++) {
            hash[i * 4] = (H[i] >> 24) & 0xFF;
            hash[i * 4 + 1] = (H[i] >> 16) & 0xFF;
            hash[i * 4 + 2] = (H[i] >> 8) & 0xFF;
            hash[i * 4 + 3] = H[i] & 0xFF;
        }

        return hash;
    }

    // 重置哈希状态
    void reset() {
        H = {
            0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
            0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
        };
    }
};

// SHA-256算法的常量（来自SHA-256标准）
const uint32_t SHA256::K[64] = {
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

class PasswordLock {
private:
    // 与Python版本对齐的salt值: b'\xb2S"e}\xdf\xb0\xfe\x9c\xde\xde\xfe\xf3\x1d\xdc>'
    std::vector<unsigned char> salt = {
        0xb2, 0x53, 0x22, 0x65, 0x7d, 0xdf, 0xb0, 0xfe,
        0x9c, 0xde, 0xde, 0xfe, 0xf3, 0x1d, 0xdc, 0x3e
    };

    // 辅助函数：将字节数组转换为十六进制字符串
    std::string bytesToHex(const std::vector<uint8_t>& bytes) {
        std::stringstream ss;
        for (const auto& byte : bytes) {
            ss << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(byte);
        }
        return ss.str();
    }

public:
    std::string hashPassword(const std::string& password) {
        // 将密码转换为字节流
        std::vector<unsigned char> passwordBytes(password.begin(), password.end());

        std::vector<unsigned char> combined;
        combined.insert(combined.end(), salt.begin(), salt.end());
        combined.insert(combined.end(), passwordBytes.begin(), passwordBytes.end());

        SHA256 sha256;
        std::vector<uint8_t> hashBytes = sha256.compute(combined);

        return bytesToHex(hashBytes);
    }

    // 验证密码
    bool verifyPassword(const std::string& inputPassword, const std::string& storedHash) {
        // 使用相同的盐值对输入密码进行哈希
        std::string calculatedHash = hashPassword(inputPassword);

        // 比较计算出的哈希值与存储的哈希值
        return calculatedHash == storedHash;
    }
};


// 优化的密码求解函数：找到哈希值与目标匹配的密码，并返回比对次数
std::pair<std::vector<int>, int> solvePassword(const std::vector<Clue>& clues, const std::string& targetHash, PasswordLock& lock) {
    std::vector<int> solution;  // 存储最终解
    std::vector<int> currentPassword;  // 当前构建的密码
    int comparisonCount = 0;  // 记录尝试次数

    // 回溯函数：尝试构建密码
    std::function<bool()> backtrack = [&]() {
        if (currentPassword.size() == 3) {
            if (checkPassword(currentPassword, clues)) {
                comparisonCount++;
                std::string userPassword;
                for (int digit : currentPassword) {
                    userPassword += std::to_string(digit);  // 转为字符串并拼接
                }
                cout << userPassword << endl;
                std::string passwordHash = lock.hashPassword(userPassword);
              
                if (passwordHash == targetHash) {
                    solution = currentPassword;  // 找到解
                    return true;  // 终止回溯
                }
            }
            return false;  // 继续尝试其他组合
        }

        // 2. 生成当前位置的候选数字
        std::vector<int> candidates = generateCandidates(currentPassword, clues);

        // 3. 尝试每个候选数字
        for (int candidate : candidates) {
            currentPassword.push_back(candidate);  // 选择当前数字

            // 递归尝试下一个位置
            if (backtrack()) {
                return true;  // 找到解，终止回溯
            }

            currentPassword.pop_back();  // 回溯：撤销选择
        }

        return false;  // 当前路径无解
        };

    backtrack();  // 开始回溯
    return { solution, comparisonCount };  // 返回解和尝试次数
}
// 主函数示例
int main() {
    // 目标哈希值
    const string targetHash = "193b83682a19e3c3cbf4a379bf39ef5be80f67a10f6f7cf438a9739cb67e4dec";//275哈希值
   

    // 解析用户输入的线索
    vector<Clue> clues = parseClues();
    if (clues.empty()) {
        std::cerr << "错误：线索列表为空，无法处理！" << std::endl;
        return 0;  // 返回 false 表示处理失败
    }
    // 创建密码锁实例
    PasswordLock lock;

    // 求解密码并获取比对次数
    auto [password, comparisonCount] = solvePassword(clues, targetHash, lock);

    // 输出结果
    if (!password.empty()) {
        cout << "最终匹配的密码: ";
        for (int digit : password) {
            cout << digit;
        }
        cout << endl;
        cout << "尝试次数: " << comparisonCount << endl;
    }
    else {
        cout << "未找到匹配的密码！" << endl;
        cout << "尝试次数: " << comparisonCount << endl;
    }

    return 0;
}
